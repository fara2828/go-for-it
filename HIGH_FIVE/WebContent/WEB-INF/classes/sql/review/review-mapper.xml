<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
<properties>
	<entry key="increaseReviewCount">
	UPDATE 
       		 REVIEW
       SET 
      
      		  REVIEW_COUNT = REVIEW_COUNT+1
	WHERE 
    	    REVIEW_NO =?
    AND 
    	    STATUS ='Y'
	
	</entry>


	<entry key="selectChall">	
	SELECT 
			CHALL_NO,
			CHALL_NAME,
			CHALL_CATEGORY,
			CHALL_POSTDATE,
     		TO_CHAR(CHALL_START, 'YYYY-MM-DD') CHALL_START,
    		TO_CHAR(CHALL_END, 'YYYY-MM-DD') CHALL_END,
			CHALL_FREQUENCY,
			CHALL_PARTICIPANT,
			CHALL_PARTICIPANT_NOW,
			CHALL_HOWTO,
			CHALL_PHOTO_EXP,
			CHALL_INTRODUCTION, 
			CHALL_THUMBNAIL,
			CHALL_PUBLIC,
			STATUS			
	FROM 
			CHALLENGE
	WHERE	
			CHALL_NO = ?
      AND 	
            STATUS = 'Y'
			
			
	</entry>

	<entry key="selectReviewList">
	SELECT
          REVIEW.REVIEW_NO
        , REVIEW.USER_NO
        , REVIEW.CHALL_NO
        , REVIEW_TITLE
        , TO_CHAR(REVIEW_DATE, 'YYYY-MM-DD') REVIEW_DATE 
        , REVIEW_CONTENT
        , REVIEW_THUMBNAIL
        , REVIEW_COUNT
        , REVIEW.STATUS
        , (SELECT SUM(LIKE_YN) FROM USER_LIKE WHERE REVIEW_NO = 1 AND LIKE_YN =1) COUNT_LIKE
        ,  MEMBER.NICKNAME
   
   FROM  REVIEW
    JOIN 
            CHALLENGE
    ON (REVIEW.CHALL_NO=CHALLENGE.CHALL_NO)
    LEFT 
    OUTER 
    JOIN 
          USER_LIKE
      ON  (REVIEW.REVIEW_NO = USER_LIKE.REVIEW_NO)
    JOIN MEMBER
     ON (REVIEW.USER_NO = MEMBER.USER_NO)
	
    WHERE
			REVIEW.STATUS = 'Y'
    AND
            CHALL_PUBLIC = 'Y'
	
	</entry>
	<entry key="selectReview">
	SELECT
          REVIEW.REVIEW_NO
        , REVIEW.USER_NO
        , REVIEW.CHALL_NO
        , REVIEW_TITLE
        , TO_CHAR(REVIEW_DATE, 'YYYY-MM-DD') REVIEW_DATE
        , REVIEW_CONTENT
        , REVIEW_THUMBNAIL
        , REVIEW_COUNT
        , REVIEW.STATUS
        , (SELECT SUM(LIKE_YN) FROM USER_LIKE WHERE REVIEW_NO = 1) COUNT_LIKE
        ,  MEMBER.NICKNAME
   FROM  REVIEW
    LEFT 
    OUTER 
    JOIN 
          USER_LIKE
      ON  (REVIEW.REVIEW_NO = USER_LIKE.REVIEW_NO)
    JOIN MEMBER
     ON (REVIEW.USER_NO = MEMBER.USER_NO)
    WHERE 
          REVIEW.REVIEW_NO = ?
      AND
      	  REVIEW.STATUS = 'Y'
	</entry>
	<entry key="selectReviewAttachmentList">
            SELECT
                   REVIEW_NO,
                   FILE_PATH,
                   CHANGE_NAME,
                   FILE_NO,
                   ORIGIN_NAME,
                   UPLOAD                   
 
             FROM 
                   ATTACHMENT
 LEFT OUTER JOIN   CHALLENGE
	          ON  (ATTACHMENT.CHALL_NO=CHALLENGE.CHALL_NO)
            WHERE  ATTACHMENT.STATUS ='Y'
             AND    REVIEW_NO = ?
	</entry>
	<entry key="orderReviewList">	
SELECT
              DISTINCT
	          REVIEW.REVIEW_NO
	        , REVIEW.USER_NO
	        , CHALL_NO
	        , REVIEW_TITLE
	        , TO_CHAR(REVIEW_DATE, 'YYYY-MM-DD') REVIEW_DATE 	        
	        , REVIEW_CONTENT
	        , REVIEW_THUMBNAIL
	        , REVIEW_COUNT
	        , REVIEW.STATUS
	        , (SELECT SUM(LIKE_YN) FROM USER_LIKE WHERE REVIEW_NO = 1 AND LIKE_YN =1) COUNT_LIKE
	        ,  MEMBER.NICKNAME
            , CHALL_CATEGORY
	    FROM  REVIEW
	    JOIN 
	          USER_LIKE
	      ON  
	      	  (REVIEW.REVIEW_NO = USER_LIKE.REVIEW_NO)
	    JOIN 
	      	   MEMBER
	     ON 
	          (REVIEW.USER_NO = MEMBER.USER_NO)
        JOIN 
              CHALLENGE 
        USING 
        	  (CHALL_NO)
        WHERE 
               CHALL_CATEGORY = ?
         AND
         		REVIEW.STATUS = 'Y'
        ORDER
           BY   ?
           DESC
	</entry>

	<entry key="orderAllReviewList">	
	
	    SELECT
              DISTINCT
	          REVIEW.REVIEW_NO
	        , REVIEW.USER_NO
	        , CHALL_NO
	        , REVIEW_TITLE
	        , TO_CHAR(REVIEW_DATE, 'YYYY-MM-DD') REVIEW_DATE
	        , REVIEW_CONTENT
	        , REVIEW_THUMBNAIL
	        , REVIEW_COUNT
	        , REVIEW.STATUS
	        , (SELECT SUM(LIKE_YN) FROM USER_LIKE WHERE REVIEW_NO = 1 AND LIKE_YN =1) COUNT_LIKE
	        ,  MEMBER.NICKNAME
            , CHALL_CATEGORY
	    FROM  REVIEW
	    LEFT
	    OUTER
	    JOIN 
	          USER_LIKE
	      ON  
	      	  (REVIEW.REVIEW_NO = USER_LIKE.REVIEW_NO)
	   	LEFT
	    OUTER  	  
	    JOIN 
	      	   MEMBER
	     ON 
	          (REVIEW.USER_NO = MEMBER.USER_NO)
       LEFT
       OUTER
        JOIN 
              CHALLENGE 
        USING 
        	  (CHALL_NO)
       	WHERE
       			REVIEW.STATUS='Y'
        ORDER
           BY  ?
           DESC

	</entry>

	<entry key="selectReplyList">
	SELECT 
			  R_COMMENT_NO
			, REVIEW_COMMENT.USER_NO
			, NICKNAME, REVIEW_NO
			, R_COMMENT_TEXT
			, TO_CHAR(REPLY_DATE, 'YYYY-MM-DD') REPLY_DATE
	  FROM 
	  		  REVIEW_COMMENT
	  JOIN 
	  		 MEMBER 
        ON 
            (REVIEW_COMMENT.USER_NO = MEMBER.USER_NO) 
 	 WHERE 
 			REVIEW_COMMENT.STATUS = 'Y'
	   AND 
	 		REVIEW_NO =?
	  AND   REVIEW_COMMENT.STATUS = 'Y'
	</entry>
	
	<entry key="insertReply">
	INSERT 
 	 INTO
    	    REVIEW_COMMENT
    VALUES 
    		(R_COMMENT_NO_SEQ.NEXTVAL
    		, ?
    		, ?
    		, ?
    		, 'Y'
    		, SYSDATE
    		)
	</entry>	
	
<!--                     바꾼내용                                                   -->
	<entry key="seletChallWithoutReview">	           
     
   SELECT
            CHALLENGE.CHALL_NO
            , CHALL_CATEGORY
            , CHALL_NAME
            , TO_CHAR(CHALL_START, 'YYYY-MM-DD') CHALL_START
            , TO_CHAR(CHALL_END, 'YYYY-MM-DD') CHALL_END

      FROM 
            CHALLENGE
     left outer  
      JOIN 
           join_chall
        ON 
           CHALLENGE.chall_no = join_chall.chall_no
      FULL 
     OUTER 
      JOIN 
            REVIEW
        ON 
           (CHALLENGE.CHALL_NO = REVIEW.CHALL_NO)
    
     WHERE 
           join_chall.USER_NO = ?
       AND 
             CHALLENGE.STATUS = 'Y'
        AND REVIEW_NO IS NULL
       AND CHALLENGE.CHALL_END &lt; SYSDATE 
       
	UNION

        SELECT
            CHALLENGE.CHALL_NO
            , CHALL_CATEGORY
            , CHALL_NAME
            , TO_CHAR(CHALL_START, 'YYYY-MM-DD') CHALL_START
            , TO_CHAR(CHALL_END, 'YYYY-MM-DD') CHALL_END

      FROM 
            CHALLENGE
            
            
     left outer  
      JOIN 
           join_chall
        ON 
           CHALLENGE.chall_no = join_chall.chall_no
      FULL 
     OUTER 
      JOIN 
            REVIEW
        ON 
           (CHALLENGE.CHALL_NO = REVIEW.CHALL_NO)
     WHERE 
           join_chall.USER_NO = ?
       AND 
             CHALLENGE.STATUS = 'Y'
       AND 
           REVIEW.STATUS = 'Y'
        AND CHALLENGE.CHALL_END &lt; SYSDATE     
	</entry>
<!--                     바꾼내용                                                   -->	
	
		<entry key="insertReview">
	INSERT 
	  INTO 
	        REVIEW
	VALUES
	        (REVIEW_NO_SEQ.NEXTVAL,  ?, ?, ?, SYSDATE, ?, ?, 0, 'Y')  

	        
		
		</entry>
		<entry key="insertAttachmentList">
		
		INSERT 
	  INTO 
	        ATTACHMENT
	        
	VALUES
	        (? , NULL, NULL, REVIEW_NO_SEQ.CURRVAL, NULL, 'Y', NULL, ?, ?, SYSDATE, FILE_NO_SEQ.NEXTVAL) 
	
	</entry>

	<entry key="selectLike">
	    SELECT  LIKE_YN
     FROM
            USER_LIKE
    WHERE
            USER_NO = ?
      AND
            REVIEW_NO =?
	
	</entry>
	<entry key="insertLike">
	INSERT 
      INTO
            USER_LIKE
     VALUES
            (?, ?, 1)
	</entry>
	
	<entry key="updateLikeY">
	UPDATE 
			USER_LIKE 
       SET 	LIKE_YN = 1
    WHERE
          USER_NO = ?
       AND 
           REVIEW_NO=?
	</entry>
	
	<entry key="updateLikeN">
	UPDATE 
			USER_LIKE 
       SET 	LIKE_YN = 0
    WHERE
          USER_NO = ?
       AND 
           REVIEW_NO=?
	</entry>
	<entry key="countReviewLike">
    SELECT 
            SUM(LIKE_YN) 
      FROM 
            USER_LIKE 
     WHERE 
            REVIEW_NO=? 
	</entry>
	
	<entry key="myLikeYN">
    SELECT 
            LIKE_YN 
      FROM 
            USER_LIKE 
     WHERE 
            REVIEW_NO=? 
       AND  USER_NO=?
	</entry>
	
		
	
	
	<entry key="updateReview">
	UPDATE 
	       REVIEW
   	SET	
   			REVIEW_TITLE = ?,
   			REVIEW_CONTENT=?,
   			REVIEW_THUMBNAIL = ?
  WHERE
  		   REVIEW_NO = ?
  	AND	
  			REVIEW.STATUS = 'Y'

	</entry>
	<entry key="updateReviewAttachment" >
	UPDATE
			ATTACHMENT
	 SET		 
	 		   ORIGIN_NAME = ?,
		       CHANGE_NAME = ?,
		       FILE_PATH = ?,
		       UPLOAD = SYSDATE	
	WHERE
			FILE_NO = ?
	
	</entry>
	<entry key="insertReviewAttachment">
	INSERT 
	  INTO 
	        ATTACHMENT
	        
	VALUES
	        (? , NULL, NULL, ?, NULL, 'Y', NULL, ?, ?, SYSDATE, FILE_NO_SEQ.NEXTVAL) 
	</entry>
	
	<entry key="deleteReview">
	UPDATE 
			REVIEW
	   SET
	   		STATUS ='N'
	   WHERE
	   		REVIEW_NO =?
			
	</entry>
	<entry key="deleteReply">
	UPDATE
	 		REVIEW_COMMENT
	 SET
	 		STATUS  = 'N'
	 WHERE 
	 		R_COMMENT_NO = ?
	 AND 
	 		USER_NO =?	 
	
	</entry>	




	
</properties>